1|Access Modifiers are keywords that define the accessibility of a member or a class or a datatype in a C# program. Which of the following is not an access modifier in C#?|public|protected|internal|private|Static
2|Value (built-in) Types (primitive variable types) and Reference (built-in) Types are the two main categories of C# Types. Which of the following statements is not correct about C# Types?|In C# char is a Value Type|In C# string is a Reference Type|In C# object is a Reference Type|In C# int is a Value Type|In C# Boolean is a Reference Type
3|Casting is the process of converting one data type into another. Implicit casting (automatic conversion) happens when the compiler can perform the conversion automatically between compatible types and where the target type has a larger capacity. Explicit Casting (type casting or forced conversion) is necessary when converting a larger type to a smaller one. Type conversion in C# can be performed using built-in methods. This is generally needed when converting between incompatible types. Which of the following C# code will cause a compiler error?|int x = 3; double y = 2.3; double z = 2; x = y;|int x = 3; double y = 2.3; double z = 2; y = x;|int x = 3; double y = 2.3; double z = 2; y = z;|int x = 3; double y = 2.3; double z = 2; z = y;|int x = 3; double y = 2.3; double z = 2; z = x;
4|Which of the following statements is not correct?|In C# If you pass a primitive data value as an argument to a method then the default is pass-by-value|In C# If you pass an array of primitives to a method then the default is pass-by-reference|In C# If you pass a string as an argument to a method then it defaults to pass-by-value|In C# If you pass a List of strings as an argument to a method then it defaults to pass-by-value
5|Regular Expressions are used to compare string data to patterns and can also be used to parse string data. Which of the following regular expressions will match the strings "revolution", "revolutionary", and "revolutionaries"?|revolution[a-z]?|revolution[a-z]*|revolution[a-z|revolutionary
6|Which of the following statements is correct?|An abstract class can be instantiated with an abstract constructor|An abstract class can be instantiated with a static constructor|C# allows multiple inheritance of classes|C# allows a class to extend a single class and optionally multiple interfaces
7|Which of the following is not correct about an Interface?|It does not contain a constructor|It can contain static members|It only contains public access modifier|It can only contain methods
8|Method Overloading is the common way of implementing polymorphism. It is the ability to redefine a function in more than one form. A user can implement function overloading by defining two or more functions in a class sharing the same name. If method "MethodName" has been defined like "private static void MethodName(int x, double y, string s, object sender)", then which of the following declarations is not a legal overloading of the method "MethodName"?|private void MethodName(object sender, int x, double y, string s)|public static void MethodName(int x, double y, string s, object sender)|public static void MethodName(double y, int x, string s, object sender)|private static void MethodName(int x)|public static void MethodName()
9|Which of the following statements is in-correct?|Catch block is only going to be executed when an exception is raised in the program|In C# you can use more than one catch blocks with the try block|An exception is a compile-time error|In C# multiple catch blocks can be used to handle different types of exceptions|In C# you cannot use multiple catch blocks for the same type of exception
10|The && operator returns true if both operands are true, otherwise false. The ! operator returns true if the operand is false, and false if the operand is true. Which of the following statements is not true?|Logical condition ("yes"=="yes") && (2==2) will return true|Logical condition  (true && true) && !(3==2) will return true|Logical condition  (true && true)  will return !false|Logical condition   ((2/2)==1 && !(Color.Red==Color.Blue)) && ("yes"=="Yes")  will return true
